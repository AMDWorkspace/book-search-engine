"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApolloServer = void 0;
const apollo_server_core_1 = require("apollo-server-core");
const azureFunctionApollo_1 = require("./azureFunctionApollo");
class ApolloServer extends apollo_server_core_1.ApolloServerBase {
    serverlessFramework() {
        return true;
    }
    createGraphQLServerOptions(request, context) {
        return super.graphQLServerOptions({ request, context });
    }
    createHandler({ cors, onHealthCheck, disableHealthCheck, } = {}) {
        const staticCorsHeaders = {};
        if (cors) {
            if (cors.methods) {
                if (typeof cors.methods === 'string') {
                    staticCorsHeaders['Access-Control-Allow-Methods'] = cors.methods;
                }
                else if (Array.isArray(cors.methods)) {
                    staticCorsHeaders['Access-Control-Allow-Methods'] =
                        cors.methods.join(',');
                }
            }
            if (cors.allowedHeaders) {
                if (typeof cors.allowedHeaders === 'string') {
                    staticCorsHeaders['Access-Control-Allow-Headers'] =
                        cors.allowedHeaders;
                }
                else if (Array.isArray(cors.allowedHeaders)) {
                    staticCorsHeaders['Access-Control-Allow-Headers'] =
                        cors.allowedHeaders.join(',');
                }
            }
            if (cors.exposedHeaders) {
                if (typeof cors.exposedHeaders === 'string') {
                    staticCorsHeaders['Access-Control-Expose-Headers'] =
                        cors.exposedHeaders;
                }
                else if (Array.isArray(cors.exposedHeaders)) {
                    staticCorsHeaders['Access-Control-Expose-Headers'] =
                        cors.exposedHeaders.join(',');
                }
            }
            if (cors.credentials) {
                staticCorsHeaders['Access-Control-Allow-Credentials'] = 'true';
            }
            if (cors.maxAge) {
                staticCorsHeaders['Access-Control-Max-Age'] = cors.maxAge;
            }
        }
        let landingPage;
        return (context, req) => {
            this.ensureStarted()
                .then(() => {
                var _a, _b;
                if (landingPage === undefined) {
                    landingPage = this.getLandingPage();
                }
                const requestHeaders = Object.create(null);
                for (const [name, value] of Object.entries(req.headers)) {
                    requestHeaders[name.toLowerCase()] = value;
                }
                const corsHeaders = { ...staticCorsHeaders };
                const originHeader = requestHeaders['origin'];
                if (cors === undefined) {
                    corsHeaders['Access-Control-Allow-Origin'] = '*';
                }
                else if (cors === null || cors === void 0 ? void 0 : cors.origin) {
                    if (typeof cors.origin === 'string') {
                        corsHeaders['Access-Control-Allow-Origin'] = cors.origin;
                    }
                    else if (typeof cors.origin === 'boolean' ||
                        (Array.isArray(cors.origin) &&
                            originHeader !== undefined &&
                            cors.origin.includes(originHeader))) {
                        corsHeaders['Access-Control-Allow-Origin'] = originHeader;
                    }
                }
                if (!disableHealthCheck &&
                    ((_a = req.url) === null || _a === void 0 ? void 0 : _a.endsWith('/.well-known/apollo/server-health'))) {
                    const successfulResponse = {
                        body: JSON.stringify({ status: 'pass' }),
                        status: 200,
                        headers: {
                            'Content-Type': 'application/health+json',
                            ...corsHeaders,
                        },
                    };
                    if (onHealthCheck) {
                        onHealthCheck(req)
                            .then(() => {
                            return context.done(null, successfulResponse);
                        })
                            .catch(() => {
                            return context.done(null, {
                                body: JSON.stringify({ status: 'fail' }),
                                status: 503,
                                headers: {
                                    'Content-Type': 'application/health+json',
                                    ...corsHeaders,
                                },
                            });
                        });
                        return;
                    }
                    else {
                        return context.done(null, successfulResponse);
                    }
                }
                if (req.method === 'OPTIONS') {
                    if (requestHeaders['access-control-request-headers'] &&
                        (cors === undefined || (cors && !cors.allowedHeaders))) {
                        corsHeaders['Access-Control-Allow-Headers'] =
                            requestHeaders['access-control-request-headers'];
                        corsHeaders['Vary'] = 'Access-Control-Request-Headers';
                    }
                    if (requestHeaders['access-control-request-method'] &&
                        (cors === undefined || (cors && !cors.methods))) {
                        corsHeaders['Access-Control-Allow-Methods'] =
                            requestHeaders['access-control-request-method'];
                    }
                    context.done(null, {
                        body: '',
                        status: 204,
                        headers: corsHeaders,
                    });
                    return;
                }
                if (landingPage &&
                    req.method === 'GET' &&
                    ((_b = requestHeaders['accept']) === null || _b === void 0 ? void 0 : _b.includes('text/html'))) {
                    context.done(null, {
                        body: landingPage.html,
                        status: 200,
                        headers: {
                            'Content-Type': 'text/html',
                            ...corsHeaders,
                        },
                    });
                    return;
                }
                const callbackFilter = (error, output) => {
                    context.done(error, output && {
                        ...output,
                        headers: {
                            ...output.headers,
                            ...corsHeaders,
                        },
                    });
                };
                (0, azureFunctionApollo_1.graphqlAzureFunction)(async () => {
                    return this.createGraphQLServerOptions(req, context);
                })(context, req, callbackFilter);
            })
                .catch((err) => context.done(err));
        };
    }
}
exports.ApolloServer = ApolloServer;
//# sourceMappingURL=ApolloServer.js.map