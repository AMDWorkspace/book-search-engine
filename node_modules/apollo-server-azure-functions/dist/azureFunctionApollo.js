"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.graphqlAzureFunction = void 0;
const apollo_server_core_1 = require("apollo-server-core");
const apollo_server_env_1 = require("apollo-server-env");
function graphqlAzureFunction(options) {
    if (!options) {
        throw new Error('Apollo Server requires options.');
    }
    if (arguments.length > 1) {
        throw new Error(`Apollo Server expects exactly one argument, got ${arguments.length}`);
    }
    const graphqlHandler = (context, request, callback) => {
        if (request.method === 'POST' && !request.body) {
            callback(null, {
                body: 'POST body missing.',
                status: 400,
            });
            return;
        }
        (0, apollo_server_core_1.runHttpQuery)([request, context], {
            method: request.method,
            options: options,
            query: request.method === 'POST' && request.body
                ? request.body
                : request.query,
            request: {
                url: request.url,
                method: request.method,
                headers: new apollo_server_env_1.Headers(request.headers),
            },
        }).then(({ graphqlResponse, responseInit }) => {
            callback(null, {
                body: graphqlResponse,
                status: responseInit.status || 200,
                headers: responseInit.headers,
            });
        }, (error) => {
            if ((0, apollo_server_core_1.isHttpQueryError)(error)) {
                callback(null, {
                    body: error.message,
                    status: error.statusCode,
                    headers: error.headers,
                });
            }
            else {
                callback(error);
            }
        });
    };
    return graphqlHandler;
}
exports.graphqlAzureFunction = graphqlAzureFunction;
//# sourceMappingURL=azureFunctionApollo.js.map